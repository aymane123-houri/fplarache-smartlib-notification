name: 'publish api image'
description: 'publish api image'

inputs:
  maven-environment:
    description: 'Maven environment to use (e.g., dev or prod)'
    default: 'dev'  
  
  maven-project-path:
    description: 'Path to the Maven project (default: root)'
    default: '.' 
  
  dockerfile:
    description: 'Path to the Dockerfile'
    default: './Dockerfile'  
  
  main-class:
    description: 'Main class or entry point for the Java application'
    default: 'fplarache.smartlib.notifications'  
  
  image-short-name:
    description: 'Short name of the Docker image'
    default: 'smartlib-notification'  
  
  image-prefix:
    description: 'Prefix for the Docker image'
    default: 'smartlib-notifications'  
  
  image-tag:
    description: 'Tag for the Docker image'
    default: 'v1.0.0'  
  
  ecr-registry:
    description: 'AWS ECR registry'
    default: '774305596814.dkr.ecr.eu-north-1.amazonaws.com'  
    
outputs:
  image-uri:
    description: 'URI of the Docker image'
    value: ${{ inputs.ecr-registry }}/${{ inputs.image-prefix }}-${{ inputs.image-short-name }}:${{ inputs.image-tag }}

runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        export IMAGENAME=${{ inputs.ecr-registry }}/${{ inputs.image-prefix }}-${{ inputs.image-short-name }}

        # Construction du projet Maven avec le profil spécifié
        echo "Building Maven project..."
        mvn clean package -f ${{ inputs.maven-project-path }}/pom.xml -DskipTests -P${{ inputs.maven-environment }}
        
        # Copier le JAR généré dans le répertoire de travail
        echo "Copying packaged JAR..."
        cp ${{ inputs.maven-project-path }}/target/*.jar app.jar

        # Construction de l'image Docker avec les arguments
        echo "Building Docker image..."
        docker build --build-arg JAVA_MAIN_CLASS=${{ inputs.main-class }} -f ${{ inputs.dockerfile }} -t $IMAGENAME:${{ inputs.image-tag }} .
        
        # Tagging de l'image avec le tag latest
        docker image tag $IMAGENAME:${{ inputs.image-tag }} $IMAGENAME:latest
        
        # Push des images vers ECR
        echo "Pushing Docker image..."
        docker push $IMAGENAME:${{ inputs.image-tag }}
        docker push $IMAGENAME:latest

        # Affichage de l'URI de l'image
        echo "image-uri: $IMAGENAME:${{ inputs.image-tag }}"
