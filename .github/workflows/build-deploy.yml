name: Deploy Java Application

on:
  workflow_dispatch:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+-dev"
      - "v[0-9]+.[0-9]+.[0-9]+-prod"

env:
  BEFORE_SHA: ${{ github.event.before }}

jobs:
  setup:
    name: "Deploy Java Application"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Extract branch name or tag
        id: extract_ref
        run: |
          if [[ $GITHUB_REF == refs/heads/* ]]; then
            echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "branch=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set environment variables
        id: vars
        run: |
          ENVIRONMENT=$(echo "${branch}" | grep -oE "dev|prod" || echo "unknown")
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV
          echo "APPLICATION=smartlib" >> $GITHUB_ENV
          echo "SERVICE=notification" >> $GITHUB_ENV
          echo "fullServiceName=${ENVIRONMENT}-smartlib-notification" >> $GITHUB_ENV

      - name: Configure AWS credentials
        if: env.ENVIRONMENT != 'unknown'
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets[env.ENVIRONMENT | upper | append('_ADMIN_AWS_ACCESS_KEY')] }}
          aws-secret-access-key: ${{ secrets[env.ENVIRONMENT | upper | append('_ADMIN_AWS_SECRET_KEY')] }}
          aws-region: "eu-north-1"

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build Java application
        run: mvn clean package -DskipTests

      - name: Publish Docker image
        id: publish-image
        uses: ./.github/actions/publish-api-image
        with:
          dockerfile: './Dockerfile'
          image-prefix: "${{ env.fullServiceName }}"
          image-tag: ${{ github.sha }}
          ecr-registry: ${{ steps.login-ecr.outputs.registry }}

      - name: Deploy ECS service
        if: env.ENVIRONMENT != 'unknown'
        run: |
          TASK_JSON=$(aws ecs update-service \
            --force-new-deployment \
            --cluster "${{ env.fullServiceName }}-fgcluster" \
            --service "${{ env.fullServiceName }}-service")
          TASK_ARN=$(echo "${TASK_JSON}" | jq -r '.service.deployments[0].id')
          echo "deployment-arn=${TASK_ARN}" >> $GITHUB_ENV
